---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import { normalizeType } from "../../utils/normalizeType.js";

const PAGE_SIZE = 9;
const { searchParams } = new URL(Astro.request.url);
const type = searchParams.get("type") || "read";
let sort = searchParams.get("sort") || "created";
if (sort === "newest") sort = "created";
let order = searchParams.get("order");
if (sort === "alpha") {
  order = "asc";
} else {
  order = order || "desc";
}

const allPosts = await getCollection("posts");
const visiblePosts = allPosts.filter((post) => post.data.show === true);
const filteredPosts = type === "all"
  ? visiblePosts
  : visiblePosts.filter((post) => normalizeType(post.data.type) === type);

function getSortDate(post, field) {
  if (field === "updated") {
    return new Date(post.data.dateUpdated || post.data.dateCreated || 0).getTime();
  }
  return new Date(post.data.dateCreated || 0).getTime();
}

let sortedPosts = filteredPosts;
if (sort === "created") {
  sortedPosts = [...filteredPosts].sort((a, b) =>
    order === "asc"
      ? getSortDate(a, "created") - getSortDate(b, "created")
      : getSortDate(b, "created") - getSortDate(a, "created")
  );
} else if (sort === "updated") {
  sortedPosts = [...filteredPosts].sort((a, b) =>
    order === "asc"
      ? getSortDate(a, "updated") - getSortDate(b, "updated")
      : getSortDate(b, "updated") - getSortDate(a, "updated")
  );
} else if (sort === "alpha") {
  sortedPosts = [...filteredPosts].sort((a, b) => {
    const cmp = (a.data.title || "").localeCompare(
      b.data.title || "",
      undefined,
      {
        sensitivity: "base",
        ignorePunctuation: true,
      }
    );
    return cmp;
  });
} else {
  // Default: created desc
  sortedPosts = [...filteredPosts].sort(
    (a, b) => getSortDate(b, "created") - getSortDate(a, "created")
  );
}

const paginatedPosts = sortedPosts.slice(0, PAGE_SIZE);
const totalPages = Math.max(1, Math.ceil(sortedPosts.length / PAGE_SIZE));
const taxonomy = ["all", "read", "play", "about"];
---

<BaseLayout
  posts={paginatedPosts}
  taxonomy={taxonomy}
  currentPage={1}
  totalPages={totalPages}
  type={type}
  sort={sort}
  order={order}
/>
