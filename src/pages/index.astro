---
import BaseLayout from "../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import { normalizeType } from "../utils/normalizeType.js";
// import PagefindSearch from "../components/features/PagefindSearch.jsx";

const PAGE_SIZE = 3;
const { searchParams } = new URL(Astro.request.url);
const type = searchParams.get("type") || "all";
let sort = searchParams.get("sort") || "activity"; // Changed to unified timeline
if (sort === "newest") sort = "activity"; // backward compatibility
let order = searchParams.get("order");
if (sort === "alpha") {
	order = "asc";
} else {
	order = order || "desc";
}

const allPosts = await getCollection("posts");
console.log("All Posts:", allPosts);
const visiblePosts = allPosts.filter((post) => post.data.show === true);
const filteredPosts =
	type === "all" ?
		visiblePosts.filter((post) => {
			const norm = normalizeType(post.data.type);
			return (
				norm === "read" ||
				norm === "post" ||
				norm === "play" ||
				norm === "about" ||
				post.data.priority === "urgent"
			);
		})
	:	visiblePosts.filter(
			(post) =>
				normalizeType(post.data.type) === type ||
				post.data.priority === "urgent"
		);

console.log("Filtered Posts:", filteredPosts);

function getSortDate(post, field) {
	if (field === "updated") {
		return new Date(
			post.data.dateUpdated || post.data.dateCreated || 0
		).getTime();
	} else if (field === "activity") {
		// Unified timeline: use most recent activity (updated OR created)
		return new Date(
			post.data.dateUpdated || post.data.dateCreated || 0
		).getTime();
	}
	return new Date(post.data.dateCreated || 0).getTime();
}

let sortedPosts = filteredPosts.sort((a, b) => {
	if (a.data.priority === "urgent" && b.data.priority !== "urgent") return -1;
	if (b.data.priority === "urgent" && a.data.priority !== "urgent") return 1;
	if (sort === "activity") {
		return order === "asc" ?
				getSortDate(a, "activity") - getSortDate(b, "activity")
			:	getSortDate(b, "activity") - getSortDate(a, "activity");
	} else if (sort === "created") {
		return order === "asc" ?
				getSortDate(a, "created") - getSortDate(b, "created")
			:	getSortDate(b, "created") - getSortDate(a, "created");
	} else if (sort === "updated") {
		return order === "asc" ?
				getSortDate(a, "updated") - getSortDate(b, "updated")
			:	getSortDate(b, "updated") - getSortDate(a, "updated");
	}
	return 0;
});
const paginatedPosts = sortedPosts.slice(0, PAGE_SIZE);
const totalPages = Math.max(1, Math.ceil(sortedPosts.length / PAGE_SIZE));
const taxonomy = ["all", "read", "play", "about"];
---

<BaseLayout
	posts={paginatedPosts}
	taxonomy={taxonomy}
	currentPage={1}
	totalPages={totalPages}
	type={type}
	sort={sort}
	order={order}
/>

<script>
	window.addEventListener("popstate", () => {
		location.reload(); // Reload the page to reprocess updated URL parameters
	});
</script>
