---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getCollection, getEntry } from "astro:content";
import styles from "../../components/islands/Feed.module.css";

export async function getStaticPaths() {
	const allPosts = await getCollection("posts");
	// Only generate pages for posts with show: true
	const visiblePosts = allPosts.filter((post) => post.data.show === true);
	return visiblePosts.map((post) => ({ params: { slug: post.slug } }));
}

const { slug } = Astro.params;
const post = await getEntry("posts", slug);

// If post doesn't exist or has show: false, return 404
if (!post || post.data.show !== true) {
	return new Response("Post not found or not visible", { status: 404 });
}

const rendered = await post.render();

// Convert dates to JS Date objects at build time
const dateCreated = new Date(post.data.dateCreated);
const dateUpdated =
	post.data.dateUpdated ? new Date(post.data.dateUpdated) : null;

// Helper functions for elegant date display
function formatDate(date) {
	if (!date) return "";
	return date.toLocaleDateString("en-US", {
		month: "short",
		day: "numeric",
		year: "numeric",
	});
}

function fuzzyDate(date) {
	if (!date) return "";
	const now = new Date();
	const diffMs = now.getTime() - date.getTime();
	const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
	const diffMonths =
		now.getMonth() -
		date.getMonth() +
		12 * (now.getFullYear() - date.getFullYear());

	if (diffDays < 1) return "today";
	if (diffDays === 1) return "yesterday";
	if (diffDays < 7) return `${diffDays} days ago`;
	if (diffDays < 31) return `${Math.floor(diffDays / 7)} weeks ago`;
	if (diffMonths < 12) return `${diffMonths} months ago`;
	return `${now.getFullYear() - date.getFullYear()} years ago`;
}

function isRecent(date) {
	if (!date) return false;
	const now = new Date();
	const diffDays = (now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24);
	return diffDays < 60; // Less than 2 months
}

function elegantDateDisplay(created, updated) {
	if (!created && !updated) return "";

	// If no update or same date, show created date
	if (!updated || created.getTime() === updated.getTime()) {
		const createdText =
			isRecent(created) ? fuzzyDate(created) : formatDate(created);
		return `Created ${createdText}`;
	}

	// Show both dates for context on detail page
	const createdText =
		isRecent(created) ? fuzzyDate(created) : formatDate(created);
	const updatedText =
		isRecent(updated) ? fuzzyDate(updated) : formatDate(updated);

	return `Created ${createdText}, updated ${updatedText}`;
}
---

<BaseLayout>
	<!-- Use same feed layout wrapper to match card styles -->
	<ul id="posts-feed">
		<li class={`${styles["post-card"]} expanded-card`}>
			<div class={styles["post-card-inner"] + " flex-col gap-lg"}>
				{
					(post.data.type === "game" || post.data.type === "play") &&
						post.data.slug && (
							<div
								class={
									styles["post-card-thumbnail"] +
									" mb-0 mr-lg flex items-center"
								}
							>
								<img
									src={`/games/${post.data.slug}/thumbnail.png`}
									alt={`Thumbnail for ${post.data.title}`}
									class={`${styles["post-thumb-large"]} block`}
									loading="lazy"
									onerror="this.style.display='none'"
								/>
							</div>
						)
				}
				<!-- New expandable embed card -->
				{
					(post.data.type === "game" || post.data.type === "play") &&
						post.data.slug && (
							<div class={styles["post-card"] + " w-full mb-lg flex-col"}>
								<div class={styles["post-card-inner"] + " flex-col p-md"}>
									<button
										id="toggle-embedded-game"
										class="feed-cta pill mb-md"
									>
										Show Embedded Game
									</button>
									<div
										id="embedded-game-container"
										class="w-full hidden"
									>
										<iframe
											src={`/games/${post.data.slug}/index.html`}
											title={`Embedded game: ${post.data.title}`}
											class="w-full min-h-embed rounded-unified border-unified shadow-unified mt-lg bg-card"
											loading="lazy"
											allowfullscreen
										/>
									</div>
								</div>
							</div>
						)
				}

				<article class={styles["post-card-content"]}>
					<button
						onclick="history.back()"
						class="feed-cta pill mb-lg"
						>‚Üê Back</button
					>
					<a
						href={Astro.url.pathname}
						data-testid="feed-post-link"
						class="post-title block font-lg font-bold color-title mb-xs break-word"
					>
						{post.data.title}
					</a>
					<div class="post-date color-muted mb-xs min-h-date">
						{elegantDateDisplay(dateCreated, dateUpdated)}
					</div>
					{
						post.data.description && (
							<div class={styles["post-description"] + " mb-xs"}>
								{post.data.description}
							</div>
						)
					}
					<div class="post-content">
						<rendered.Content />
					</div>
				</article>
			</div>
		</li>
	</ul>
	<script is:inline>
		const toggleBtn = document.getElementById("toggle-embedded-game");
		const embeddedContainer = document.getElementById(
			"embedded-game-container"
		);
		if (toggleBtn && embeddedContainer) {
			toggleBtn.addEventListener("click", () => {
				embeddedContainer.classList.toggle("hidden");
				toggleBtn.textContent =
					embeddedContainer.classList.contains("hidden") ?
						"Show Embedded Game"
					:	"Hide Embedded Game";
			});
		}
	</script>
</BaseLayout>
