---
import ThemeToggle from "../islands/ThemeToggle.jsx";
import NavbarSearch from "../features/NavbarSearch.jsx";

const {
	taxonomy = ["all", "read", "play", "about"],
	type = "all",
	sort = "activity",
	order = "desc",
} = Astro.props;
---

<header class="navbar-horizontal">
	<div class="navbar-container">
		<!-- Logo Section -->
		<div class="navbar-section logo-section">
			<a
				href="/"
				class="navbar-logo"
			>
				<img
					src="/assets/k_blk_svg.svg"
					alt="Logo"
					class="logo-img"
				/>
			</a>
		</div>

		<!-- Search Section -->
		<div class="navbar-section search-section">
			<NavbarSearch client:load />
		</div>

		<!-- Dropdown Section -->
		<div class="navbar-section dropdown-section">
			<button
				type="button"
				class="dropdown-trigger"
				id="dropdown-trigger"
				aria-expanded="false"
				aria-controls="dropdown-menu"
				aria-label="Open menu"
			>
				<svg
					width="20"
					height="20"
					viewBox="0 0 24 24"
					fill="none"
					stroke="currentColor"
					stroke-width="2"
				>
					<circle
						cx="12"
						cy="12"
						r="1"
					></circle>
					<circle
						cx="12"
						cy="5"
						r="1"
					></circle>
					<circle
						cx="12"
						cy="19"
						r="1"
					></circle>
				</svg>
			</button>
		</div>
	</div>
</header>

<!-- Portals for dropdown and search -->
<div id="navbar-dropdown-portal"></div>
<div id="navbar-search-portal"></div>

<!-- Backdrop for blur effect - positioned outside navbar to avoid stacking context issues -->
<div
	class="blur-backdrop"
	id="blur-backdrop"
>
</div>

<!-- Dropdown Container -->
<div
	class="dropdown-container"
	id="dropdown-container"
>
	<div class="dropdown-content">
		<!-- Filter Section -->
		<div class="menu-section">
			<h3 class="section-title">Filter</h3>
			<div class="filter-buttons">
				{
					taxonomy.map((item) => (
						<button
							type="button"
							class="filter-btn pill"
							data-type={item}
							data-active={type === item}
						>
							{item.charAt(0).toUpperCase() + item.slice(1)}
						</button>
					))
				}
			</div>
		</div>

		<!-- Sort Section -->
		<div class="menu-section">
			<h3 class="section-title">Sort</h3>
			<div class="sort-buttons">
				<button
					type="button"
					class="sort-btn pill"
					data-sort="activity"
					data-active={sort === "activity"}
				>
					Activity
				</button>
				<button
					type="button"
					class="sort-btn pill"
					data-sort="created"
					data-active={sort === "created"}
				>
					Created
				</button>
				<button
					type="button"
					class="sort-btn pill"
					data-sort="alpha"
					data-active={sort === "alpha"}
				>
					A-Z
				</button>
			</div>
			{
				sort !== "alpha" && (
					<div class="order-buttons">
						<button
							type="button"
							class="order-btn glyph"
							data-order="desc"
							data-active={order === "desc"}
						>
							↓
						</button>
						<button
							type="button"
							class="order-btn glyph"
							data-order="asc"
							data-active={order === "asc"}
						>
							↑
						</button>
					</div>
				)
			}
		</div>

		<!-- Theme Section -->
		<div class="menu-section">
			<h3 class="section-title">Theme</h3>
			<div class="theme-wrapper">
				<ThemeToggle client:load />
			</div>
		</div>
	</div>
</div>

<style is:global>
	/* === HORIZONTAL NAVBAR STYLES === */

	.navbar-horizontal {
		position: fixed;
		top: 1rem;
		left: 50%;
		transform: translateX(-50%);
		max-width: var(--navbar-max-width);
		width: calc(100% - 2rem);
		z-index: 20000; /* Topmost - above everything */

		/* Frosted glass styling */
		background: var(--frosted-bg);
		backdrop-filter: var(--frosted-blur) var(--frosted-saturate);
		-webkit-backdrop-filter: var(--frosted-blur) var(--frosted-saturate);
		border: var(--frosted-border);
		border-radius: var(--radius-unified);
		box-shadow: var(--frosted-shadow);

		/* Performance optimizations */
		isolation: isolate;
		will-change: backdrop-filter;
	}

	.navbar-container {
		display: flex;
		align-items: center;
		justify-content: space-between;
		padding: var(--space-s) var(--space-m);
		min-height: calc(var(--navbar-height) - 2rem);
		gap: var(--space-m);
	}

	/* === NAVBAR SECTIONS === */

	.navbar-section {
		display: flex;
		align-items: center;
	}

	.logo-section {
		flex-shrink: 0;
	}

	.search-section {
		flex: 1;
		max-width: 400px;
	}

	.dropdown-section {
		flex-shrink: 0;
	}

	/* === LOGO STYLES === */

	.navbar-logo {
		display: flex;
		align-items: center;
		text-decoration: none;
		transition: transform 0.2s ease;
	}

	.navbar-logo:hover {
		transform: scale(1.05);
	}

	.logo-img {
		height: 32px;
		width: auto;
		color: var(--color-text);
	}

	/* === DROPDOWN TRIGGER STYLES === */

	.dropdown-trigger {
		background: rgba(255, 255, 255, 0.1);
		border: 1px solid rgba(255, 255, 255, 0.2);
		border-radius: var(--radius-btn);
		padding: var(--space-s);
		color: var(--color-text);
		cursor: pointer;
		display: flex;
		align-items: center;
		justify-content: center;
		transition: all 0.2s ease;
	}

	.dropdown-trigger:hover {
		background: rgba(255, 255, 255, 0.15);
		border-color: rgba(255, 255, 255, 0.4);
		transform: translateY(-1px);
	}

	.dropdown-trigger[aria-expanded="true"] {
		background: rgba(255, 255, 255, 0.2);
		border-color: rgba(255, 255, 255, 0.5);
	}

	/* === BLUR BACKDROP === */

	.blur-backdrop {
		position: fixed;
		top: 0;
		left: 0;
		width: 100vw;
		height: 100vh;
		z-index: 5000; /* Above main content (0) but below containers (10000) and navbar (20000) */

		/* Proper frosted glass blur effect */
		background: rgba(255, 255, 255, 0.1);
		backdrop-filter: blur(10px) saturate(1.5);
		-webkit-backdrop-filter: blur(10px) saturate(1.5);

		/* Critical properties for backdrop filter */
		isolation: isolate;
		will-change: backdrop-filter;
		transform: translateZ(0); /* Force hardware acceleration */

		/* Start hidden and animate in */
		opacity: 0;
		visibility: hidden;
		transition:
			opacity 0.25s cubic-bezier(0.4, 0, 0.2, 1),
			visibility 0.25s cubic-bezier(0.4, 0, 0.2, 1);

		/* Don't block interactions */
		pointer-events: none;
	}

	.blur-backdrop.active {
		opacity: 1;
		visibility: visible;
	}

	/* === DROPDOWN CONTAINER === */

	.dropdown-container {
		position: fixed;
		top: calc(var(--navbar-height) + 1rem);
		left: 50%;
		max-width: var(--dropdown-max-width);
		width: calc(100% - 2rem);
		z-index: 10000; /* Below navbar (20000) but above blur backdrop (5000) */

		/* Container frosted glass styling */
		background: var(--frosted-bg);
		backdrop-filter: var(--frosted-blur) var(--frosted-saturate);
		-webkit-backdrop-filter: var(--frosted-blur) var(--frosted-saturate);
		border: var(--frosted-border);
		border-top: none; /* No top border - connect seamlessly under navbar */
		border-radius: 0 0 var(--radius-unified) var(--radius-unified);
		box-shadow: var(--frosted-shadow);

		/* Performance optimizations for backdrop-filter */
		isolation: isolate;
		will-change: backdrop-filter;

		/* Enable interactions */
		pointer-events: auto;

		/* Animation - ensure perfect alignment by maintaining centering transform */
		transform: translateX(-50%) translateY(-10px);
		opacity: 0;
		visibility: hidden;
		transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);

		/* Ensure no margin/padding causing misalignment */
		margin: 0;
		box-sizing: border-box;
	}

	.dropdown-container.active {
		transform: translateX(-50%) translateY(0);
		opacity: 1;
		visibility: visible;
	}

	/* === DROPDOWN CONTENT === */

	.dropdown-content {
		padding: var(--space-l);
		display: flex;
		flex-direction: column;
		gap: var(--space-l);
	}

	.menu-section {
		display: flex;
		flex-direction: column;
		gap: var(--space-s);
	}

	.section-title {
		font-size: 0.75rem;
		font-weight: 600;
		text-transform: uppercase;
		letter-spacing: 0.05em;
		color: var(--color-text-muted);
		margin: 0;
	}

	.filter-buttons,
	.sort-buttons {
		display: flex;
		flex-wrap: wrap;
		gap: var(--space-s);
	}

	.order-buttons {
		display: flex;
		gap: var(--space-xs);
		margin-top: var(--space-xs);
	}

	/* === BUTTON STYLES === */

	.pill {
		background: var(--button-bg-inactive);
		border: 1px solid var(--button-border-inactive);
		border-radius: var(--radius-btn);
		padding: var(--space-xs) var(--space-s);
		color: var(--button-text-inactive);
		font-size: 0.875rem;
		cursor: pointer;
		transition: all 0.2s ease;
		white-space: nowrap;
		opacity: 0.7;

		/* Enhanced text rendering */
		-webkit-font-smoothing: var(--text-rendering-optimized);
		-moz-osx-font-smoothing: grayscale;
		text-rendering: optimizeLegibility;

		/* Minimum touch target */
		min-height: 44px;
		min-width: 44px;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.pill:hover {
		background: var(--button-bg-hover);
		color: var(--button-text-hover);
		border-color: var(--button-border-hover);
		opacity: 0.9;
		transform: translateY(-1px);
	}

	.pill[data-active="true"] {
		background: var(--color-accent);
		color: var(--color-text-on-accent);
		border-color: var(--color-accent);
		opacity: 1;
		font-weight: 600;
		box-shadow: var(--shadow-glow-accent);
	}

	.pill[data-active="true"]:hover {
		transform: translateY(-1px);
		box-shadow: var(--shadow-glow-accent-strong);
	}

	/* Enhanced focus visibility */
	.pill:focus-visible {
		outline: 2px solid var(--color-accent);
		outline-offset: 2px;
		text-shadow: 0 0 0 1px var(--color-bg);
	}

	/* High contrast mode support */
	@media (prefers-contrast: high) {
		.pill[data-active="true"] {
			border: 2px solid currentColor;
			text-shadow: none;
			box-shadow: none;
		}
	}

	.glyph {
		background: var(--button-bg-inactive);
		border: 1px solid var(--button-border-inactive);
		border-radius: var(--radius-btn);
		padding: var(--space-xs);
		color: var(--button-text-inactive);
		font-size: 0.875rem;
		cursor: pointer;
		transition: all 0.2s ease;
		min-width: 2rem;
		display: flex;
		align-items: center;
		justify-content: center;
		opacity: 0.7;

		/* Enhanced text rendering */
		-webkit-font-smoothing: var(--text-rendering-optimized);
		-moz-osx-font-smoothing: grayscale;
		text-rendering: optimizeLegibility;
	}

	.glyph:hover {
		background: var(--button-bg-hover);
		color: var(--button-text-hover);
		border-color: var(--button-border-hover);
		opacity: 0.9;
		transform: translateY(-1px);
	}

	.glyph[data-active="true"] {
		background: var(--color-accent);
		color: var(--color-text-on-accent);
		border-color: var(--color-accent);
		opacity: 1;
		font-weight: 600;
		box-shadow: var(--shadow-glow-accent);
	}

	.glyph[data-active="true"]:hover {
		transform: translateY(-1px);
		box-shadow: var(--shadow-glow-accent-strong);
	}

	/* Enhanced focus visibility */
	.glyph:focus-visible {
		outline: 2px solid var(--color-accent);
		outline-offset: 2px;
		text-shadow: 0 0 0 1px var(--color-bg);
	}

	.theme-wrapper {
		display: flex;
		justify-content: flex-start;
	}

	/* === RESPONSIVE DESIGN === */

	@media (max-width: 768px) {
		.navbar-horizontal {
			width: calc(100% - 1rem);
		}

		.navbar-container {
			padding: var(--space-xs) var(--space-s);
			gap: var(--space-s);
		}

		.search-section {
			max-width: none;
		}

		.dropdown-container {
			width: calc(100% - 1rem);
		}

		.dropdown-content {
			padding: var(--space-m);
		}

		.filter-buttons,
		.sort-buttons {
			justify-content: space-between;
		}

		.pill {
			flex: 1;
			text-align: center;
			min-width: 0;
		}
	}

	@media (max-width: 480px) {
		.logo-img {
			height: 28px;
		}

		.filter-buttons,
		.sort-buttons {
			flex-direction: column;
		}

		.pill {
			flex: none;
			width: 100%;
		}
	}
</style>

<script>
	class HorizontalNavbar {
		private dropdownTrigger: HTMLButtonElement | null;
		private dropdownContainer: HTMLElement | null;
		private blurBackdrop: HTMLElement | null;
		private isDropdownOpen: boolean;

		constructor() {
			console.log("HorizontalNavbar constructor called");
			this.dropdownTrigger = document.getElementById(
				"dropdown-trigger"
			) as HTMLButtonElement;
			this.dropdownContainer = document.getElementById("dropdown-container");
			this.blurBackdrop = document.getElementById("blur-backdrop");

			console.log("Elements found:", {
				dropdownTrigger: !!this.dropdownTrigger,
				dropdownContainer: !!this.dropdownContainer,
				blurBackdrop: !!this.blurBackdrop,
			});

			this.isDropdownOpen = false;

			this.init();
		}

		private init(): void {
			// Update navbar height immediately and after any changes
			this.updateNavbarHeight();
			window.addEventListener("resize", () => this.updateNavbarHeight());

			// Initialize contrast enhancement
			this.ensureTextContrast();

			// Dropdown functionality
			if (this.dropdownTrigger) {
				this.dropdownTrigger.addEventListener("click", (e) => {
					e.stopPropagation();
					this.toggleDropdown();
				});
			}

			// Filter and sort buttons
			this.initFilterSortButtons();

			// Close on outside click
			document.addEventListener("click", (e) => {
				const target = e.target as Element;
				if (
					!target.closest(".navbar-horizontal") &&
					!target.closest(".dropdown-container")
				) {
					this.closeAll();
				}
			});

			// Close on escape
			document.addEventListener("keydown", (e) => {
				if (e.key === "Escape") {
					this.closeAll();
				}
			});
		}

		private toggleDropdown(): void {
			if (this.isDropdownOpen) {
				this.closeDropdown();
			} else {
				this.openDropdown();
			}
		}

		private openDropdown(): void {
			if (this.isDropdownOpen) return;

			this.isDropdownOpen = true;
			if (this.dropdownContainer)
				this.dropdownContainer.classList.add("active");
			if (this.blurBackdrop) this.blurBackdrop.classList.add("active");
			if (this.dropdownTrigger)
				this.dropdownTrigger.setAttribute("aria-expanded", "true");
			document.body.style.overflow = "hidden";
		}

		private closeDropdown(): void {
			if (!this.isDropdownOpen) return;

			this.isDropdownOpen = false;
			if (this.dropdownContainer)
				this.dropdownContainer.classList.remove("active");
			if (this.blurBackdrop)
				this.blurBackdrop.classList.remove("active");
			if (this.dropdownTrigger)
				this.dropdownTrigger.setAttribute("aria-expanded", "false");
			document.body.style.overflow = "";
		}

		private closeAll(): void {
			this.closeDropdown();
		}

		private initFilterSortButtons(): void {
			// Filter buttons
			document.querySelectorAll(".filter-btn").forEach((btn) => {
				btn.addEventListener("click", (e) => {
					e.stopPropagation(); // Keep dropdown open
					const type = btn.getAttribute("data-type");
					if (type) {
						this.updateFilterActiveState(type);
						this.updateUrlParam("type", type);
					}
				});
			});

			// Sort buttons
			document.querySelectorAll(".sort-btn").forEach((btn) => {
				btn.addEventListener("click", (e) => {
					e.stopPropagation(); // Keep dropdown open
					const sort = btn.getAttribute("data-sort");
					if (sort) {
						const order = sort === "alpha" ? "asc" : "desc";
						this.updateSortActiveState(sort);
						this.updateUrlParams({ sort, order });
					}
				});
			});

			// Order buttons
			document.querySelectorAll(".order-btn").forEach((btn) => {
				btn.addEventListener("click", (e) => {
					e.stopPropagation(); // Keep dropdown open
					const order = btn.getAttribute("data-order");
					if (order) {
						this.updateOrderActiveState(order);
						this.updateUrlParam("order", order);
					}
				});
			});
		}

		private updateFilterActiveState(activeType: string): void {
			document.querySelectorAll(".filter-btn").forEach((btn) => {
				const btnType = btn.getAttribute("data-type");
				const isActive = btnType === activeType;
				btn.setAttribute("data-active", isActive.toString());
			});
		}

		private updateSortActiveState(activeSort: string): void {
			document.querySelectorAll(".sort-btn").forEach((btn) => {
				const btnSort = btn.getAttribute("data-sort");
				const isActive = btnSort === activeSort;
				btn.setAttribute("data-active", isActive.toString());
			});
		}

		private updateOrderActiveState(activeOrder: string): void {
			document.querySelectorAll(".order-btn").forEach((btn) => {
				const btnOrder = btn.getAttribute("data-order");
				const isActive = btnOrder === activeOrder;
				btn.setAttribute("data-active", isActive.toString());
			});
		}

		private updateUrlParam(key: string, value: string): void {
			const url = new URL(window.location.href);
			url.searchParams.set(key, value);
			url.searchParams.set("page", "1");
			history.pushState({}, "", url.toString());
		}

		private updateUrlParams(params: Record<string, string>): void {
			const url = new URL(window.location.href);
			Object.entries(params).forEach(([k, v]) => {
				url.searchParams.set(k, v);
			});
			url.searchParams.set("page", "1");
			history.pushState({}, "", url.toString());
		}

		private updateNavbarHeight(): void {
			// Add a small delay to ensure the navbar is fully rendered
			setTimeout(() => {
				const navbar = document.querySelector(
					".navbar-horizontal"
				) as HTMLElement;
				if (navbar) {
					const height = navbar.getBoundingClientRect().height;
					document.documentElement.style.setProperty(
						"--navbar-height",
						`${height}px`
					);
					console.log("Updated navbar height to:", `${height}px`);
				}
			}, 10);
		}

		private ensureTextContrast(): void {
			// Get the current accent color
			const accentColor = getComputedStyle(document.documentElement)
				.getPropertyValue("--color-accent")
				.trim();

			if (!accentColor) return;

			// Parse color to RGB values
			const rgb = this.parseColor(accentColor);
			if (!rgb) return;

			// Calculate relative luminance using WCAG formula
			const luminance = this.getRelativeLuminance(rgb.r, rgb.g, rgb.b);

			// Use white text for dark colors, black text for bright colors
			// Threshold of 0.5 works well for most neon colors
			const textColor = luminance > 0.5 ? "#000000" : "#ffffff";

			// Apply the calculated contrast color
			document.documentElement.style.setProperty(
				"--color-text-on-accent",
				textColor
			);

			console.log(
				`Accent color: ${accentColor}, Luminance: ${luminance.toFixed(3)}, Text: ${textColor}`
			);
		}

		private parseColor(
			color: string
		): { r: number; g: number; b: number } | null {
			if (!color) return null;

			// Handle hex colors
			if (color.startsWith("#")) {
				const hex = color.replace("#", "");
				if (hex.length === 3) {
					return {
						r: parseInt(hex[0] + hex[0], 16),
						g: parseInt(hex[1] + hex[1], 16),
						b: parseInt(hex[2] + hex[2], 16),
					};
				}
				if (hex.length === 6) {
					return {
						r: parseInt(hex.substring(0, 2), 16),
						g: parseInt(hex.substring(2, 4), 16),
						b: parseInt(hex.substring(4, 6), 16),
					};
				}
			}

			// Handle rgb() and rgba() colors
			if (color.startsWith("rgb")) {
				const values = color.match(/\d+/g);
				if (values && values.length >= 3) {
					return {
						r: parseInt(values[0], 10),
						g: parseInt(values[1], 10),
						b: parseInt(values[2], 10),
					};
				}
			}

			return null;
		}

		private getRelativeLuminance(r: number, g: number, b: number): number {
			// Convert RGB to sRGB
			const sR = r / 255;
			const sG = g / 255;
			const sB = b / 255;

			// Apply gamma correction
			const R =
				sR <= 0.03928 ? sR / 12.92 : Math.pow((sR + 0.055) / 1.055, 2.4);
			const G =
				sG <= 0.03928 ? sG / 12.92 : Math.pow((sG + 0.055) / 1.055, 2.4);
			const B =
				sB <= 0.03928 ? sB / 12.92 : Math.pow((sB + 0.055) / 1.055, 2.4);

			// Calculate luminance using WCAG formula
			return 0.2126 * R + 0.7152 * G + 0.0722 * B;
		}
	}

	// Initialize when DOM is ready
	if (document.readyState === "loading") {
		document.addEventListener("DOMContentLoaded", () => {
			console.log("Initializing HorizontalNavbar on DOMContentLoaded");
			new HorizontalNavbar();
		});
	} else {
		console.log("Initializing HorizontalNavbar immediately");
		new HorizontalNavbar();
	}
</script>
