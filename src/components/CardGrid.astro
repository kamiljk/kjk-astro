---
import Card from "./Card.astro";
import CardGame from "./CardGame.astro";

// Eagerly import all markdown posts as components
const modules = import.meta.glob("../content/posts/*.md", { eager: true });
const allPosts = Object.entries(modules).map(([path, mod]) => {
  const frontmatter = mod.frontmatter;
  // Manually convert date strings to Date objects
  const dateCreated = frontmatter.dateCreated
    ? new Date(frontmatter.dateCreated)
    : undefined;
  const dateUpdated = frontmatter.dateUpdated
    ? new Date(frontmatter.dateUpdated)
    : undefined;

  return {
    slug: path.split("/").pop()!.replace(/\.md$/, ""),
    Component: mod.default, // The actual Astro component
    data: {
      ...frontmatter, // Keep other frontmatter data
      dateCreated, // Overwrite with Date object
      dateUpdated, // Overwrite with Date object
    },
  };
});

const { activeFilters = new Set() } = Astro.props;

// Filter posts based on active filters (passed from the page)
const filteredPosts =
  activeFilters.size > 0
    ? allPosts.filter((post) => activeFilters.has(post.data?.type))
    : allPosts;
---

<div id="content-container">
  <div class="card-grid" id="card-grid">
    {
      filteredPosts.map((post) =>
        post.data?.type === "game" ? (
          <CardGame
            title={post.data?.title || post.slug}
            slug={post.slug}
            description={post.data?.description}
            dateCreated={post.data?.dateCreated}
            dateUpdated={post.data?.dateUpdated}
          />
        ) : (
          <Card
            title={post.data?.title || post.slug}
            slug={post.slug}
            description={post.data?.description}
            dateCreated={post.data?.dateCreated}
            dateUpdated={post.data?.dateUpdated}
          />
        )
      )
    }
  </div>

  <!-- Gradient Blur Overlay -->
  <!--
  <div class="gradient-blur">
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
  </div>
  -->

  <!-- Hero card container -->
  <div class="hero-card" id="hero-card" style="display: none;">
    <div class="hero-card-header">
      <a
        href="#"
        class="hero-back-link card-link"
        id="hero-back-link"
        aria-label="Back to all posts"
      >
        &larr; Back
      </a>
      <div class="hero-title-container">
        <h1 class="hero-title" id="hero-title"></h1>
      </div>
      <div class="hero-dates">
        <p
          class="hero-date-created"
          id="hero-date-created"
          style="display: none;"
        >
        </p>
        <p
          class="hero-date-updated"
          id="hero-date-updated"
          style="display: none;"
        >
        </p>
      </div>
    </div>
    <div class="hero-card-content">
      <div class="hero-markdown" id="hero-markdown">
        <p>Loading content…</p>
      </div>
    </div>
  </div>

  <!-- Hidden templates containing pre-rendered post content -->
  {
    allPosts.map((post) => (
      <template
        id={`content-${post.slug}`}
        data-title={post.data.title}
        data-date-created={post.data.dateCreated?.toISOString()}
        data-date-updated={post.data.dateUpdated?.toISOString()}
      >
        <article class="post-content">
          <post.Component />
        </article>
      </template>
    ))
  }
</div>

<script>
  // @ts-nocheck
  async function showHeroCard(slug) {
    const heroCard = document.getElementById("hero-card");
    const cardGrid = document.getElementById("card-grid");
    const titleEl = document.getElementById("hero-title");
    const markdownEl = document.getElementById("hero-markdown");
    const dateCreatedEl = document.getElementById("hero-date-created");
    const dateUpdatedEl = document.getElementById("hero-date-updated");

    // Hide card grid, show hero card
    cardGrid.style.display = "none";
    heroCard.style.display = "block";

    // Clear content initially
    markdownEl.innerHTML = "<p>Loading content…</p>";
    titleEl.textContent = "";
    dateCreatedEl.style.display = "none";
    dateUpdatedEl.style.display = "none";

    try {
      // Fetch content
      const response = await fetch(`/api/post/?slug=${slug}`);
      if (!response.ok)
        throw new Error(`Failed to load post: ${response.statusText}`);

      const container = document.createElement("div");
      container.innerHTML = await response.text();

      if (container.querySelector("[data-astro-template]")) {
        const contentTemplate = container.querySelector(
          "[data-astro-template]"
        );
        titleEl.textContent =
          contentTemplate.querySelector(".title")?.textContent || slug;
        markdownEl.innerHTML = "";

        // Add content to markdown container
        const contentBody = contentTemplate.querySelector(".content");
        if (contentBody) markdownEl.appendChild(contentBody);

        // Extract metadata
        const dateCreatedStr =
          contentTemplate.getAttribute("data-date-created");
        const dateUpdatedStr =
          contentTemplate.getAttribute("data-date-updated");
        const type = contentTemplate.getAttribute("data-type");

        // Handle date display
        if (dateCreatedStr && dateUpdatedStr) {
          const dateCreated = new Date(dateCreatedStr);
          const dateUpdated = new Date(dateUpdatedStr);

          if (dateCreated.getTime() !== dateUpdated.getTime()) {
            dateCreatedEl.textContent = `Created: ${formatDate(dateCreatedStr)}`;
            dateUpdatedEl.textContent = `Updated: ${formatDate(dateUpdatedStr)}`;
            dateCreatedEl.style.display = "block";
            dateUpdatedEl.style.display = "block";
          } else {
            dateCreatedEl.textContent = `Created: ${formatDate(dateCreatedStr)}`;
            dateCreatedEl.style.display = "block";
          }
        } else if (dateCreatedStr) {
          dateCreatedEl.textContent = `Created: ${formatDate(dateCreatedStr)}`;
          dateCreatedEl.style.display = "block";
        }

        // Special handling for game content
        if (type === "game") {
          // Generate a random CTA for the hero banner
          const ctas = [
            "EXPERIENCE",
            "EXPLORE",
            "INTERACT",
            "PLAY NOW",
            "DISCOVER",
            "ENGAGE",
            "TRY IT",
            "DIVE IN",
            "LAUNCH",
            "IMMERSE",
          ];
          const randomCTA = ctas[Math.floor(Math.random() * ctas.length)];

          // Add iframe or screenshot if available
          const gameContainer = document.createElement("div");
          gameContainer.className = "hero-game-container";

          // Add description from the content
          if (contentBody) {
            const descriptionContainer = document.createElement("div");
            descriptionContainer.className = "hero-game-description";
            descriptionContainer.appendChild(contentBody.cloneNode(true));
            gameContainer.appendChild(descriptionContainer);
          }

          // Add CTA banner for games
          const ctaBanner = document.createElement("a");
          ctaBanner.href = `/games/${slug}/index.html`;
          ctaBanner.className = "hero-game-cta-banner";
          ctaBanner.textContent = randomCTA;
          ctaBanner.rel = "noopener noreferrer";
          ctaBanner.setAttribute(
            "aria-label",
            `${randomCTA} ${titleEl.textContent}`
          );

          gameContainer.appendChild(ctaBanner);

          // Replace existing content with game container
          markdownEl.innerHTML = "";
          markdownEl.appendChild(gameContainer);
        }
      } else {
        console.error(`Content template not found for slug: ${slug}`);
        container.innerHTML = `<p>Error: Content not found for ${slug}.</p>`;
      }
    } catch (error) {
      console.error(`Error loading post: ${error}`);
      markdownEl.innerHTML = `<p>Error loading content: ${error.message}</p>`;
    }
  }

  function showCardGrid() {
    // Hide hero card, show card grid
    document.getElementById("hero-card")!.style.display = "none";
    document.getElementById("card-grid")!.style.display = "grid";

    // Update URL
    const url = new URL(window.location.href);
    url.searchParams.delete("view");
    window.history.pushState({}, "", url);
  }

  // Initialize on page load
  document.addEventListener("DOMContentLoaded", () => {
    // Check URL for view parameter
    const urlParams = new URLSearchParams(window.location.search);
    const viewSlug = urlParams.get("view");

    if (viewSlug) {
      showHeroCard(viewSlug);
    }

    // Add click handler to all card links
    document.querySelectorAll(".card-open-hero").forEach((link) => {
      link.addEventListener("click", (e) => {
        e.preventDefault();
        const slug = link.getAttribute("data-post-slug");
        if (!slug) return;

        // Update URL with view parameter
        const url = new URL(window.location.href);
        url.searchParams.set("view", slug);
        window.history.pushState({}, "", url);

        // Show hero card
        showHeroCard(slug);
      });
    });

    // Handle back link click
    const backLink = document.getElementById("hero-back-link");
    if (backLink) {
      backLink.addEventListener("click", (e) => {
        e.preventDefault();
        showCardGrid();
      });
    }

    // Handle browser back/forward buttons
    window.addEventListener("popstate", () => {
      const urlParams = new URLSearchParams(window.location.search);
      const viewSlug = urlParams.get("view");

      if (viewSlug) {
        showHeroCard(viewSlug!);
      } else {
        showCardGrid();
      }
    });
  });
</script>

<style>
  /* Hero Card Styles */
  .hero-card {
    width: 90%; /* Use percentage instead of 100% */
    max-width: 900px; /* Set a max-width like kamiljk.com */
    margin: 0 auto; /* Center the hero card */
    background-color: var(--secondary-bg);
    border: 1px solid rgba(0, 0, 0, 0.8);
    box-shadow: 4px 4px 0 rgba(0, 0, 0, 0.2);
    border-radius: 0;
  }

  /* Remove specific width adjustments for smaller screens, rely on percentage and max-width */
  @media (max-width: 1024px) {
    .hero-card {
      /* width: 85%; */ /* Removed */
      /* margin: 0 auto; */ /* Already set above */
    }
  }

  @media (max-width: 768px) {
    .hero-card {
      /* width: 80%; */ /* Removed */
      /* margin: 0 auto; */ /* Already set above */
    }
  }

  @media (max-width: 480px) {
    .hero-card {
      /* width: 90%; */ /* Already set above */
      /* margin: 0 auto; */ /* Already set above */
    }
  }

  .hero-card-header {
    padding: var(--layout-padding);
    border-bottom: 1px solid var(--card-border);
    position: relative;
  }

  .hero-title {
    margin: 0.5rem 0;
    font-size: var(--fluid-2);
  }

  .hero-date {
    color: var(--desc-color);
    margin: 0.5rem 0 0;
  }

  .hero-dates {
    margin: 0.5rem 0;
  }

  .hero-date-created,
  .hero-date-updated {
    color: var(--desc-color);
    opacity: 0.7;
    margin: 0.25rem 0;
    font-size: 0.8em;
    font-style: italic;
  }

  .card .date-created,
  .card .date-updated {
    color: var(--desc-color);
    opacity: 0.7;
    font-size: 0.75em;
    margin: 0.25rem 0;
    font-style: italic;
  }

  .hero-card-content {
    padding: var(--layout-padding);
    overflow-y: auto; /* Let page scroll instead of nested scroll */
  }

  /* Back link styling with highlight hover like other links */
  .hero-back-link {
    position: relative;
    display: inline-block;
    color: inherit;
    text-decoration: none;
    font-weight: 600;
    padding-bottom: 2px;
  }

  /* Title container and divider styling */
  .hero-title-container {
    margin-top: 1rem;
  }

  .hero-divider {
    border: 0;
    height: 1px;
    background-color: var(--card-border);
    margin-bottom: 1rem;
  }

  .hero-back-link::after {
    content: "";
    position: absolute;
    width: calc(100% + 0.4em);
    height: calc(1em + 8px);
    bottom: 0;
    left: -0.2em;
    background-color: var(--primary-color);
    transform: skewX(-15deg);
    opacity: 0;
    transition: opacity 0.2s ease-in-out;
    z-index: -1;
    display: block;
  }
  .hero-back-link:hover::after,
  .hero-back-link:focus::after {
    opacity: 1;
  }
  .hero-back-link:hover,
  .hero-back-link:focus {
    color: #000;
    text-decoration: none;
  }

  /* Game CTA Banner styling */
  .hero-game-container {
    display: flex;
    flex-direction: column;
    height: 100%; /* Ensure container takes height */
  }

  .hero-game-description {
    flex-grow: 1; /* Allow description to take available space */
  }

  .hero-game-cta-banner {
    display: block;
    width: calc(100% + 3rem); /* Compensate for the negative margins */
    background-color: #f8b500; /* You can adjust this color */
    color: #000;
    text-align: center;
    font-weight: bold;
    font-size: 1.5rem;
    padding: 1rem 0 1.4rem;
    text-decoration: none;
    margin: 0; /* Reset margin */
    margin-top: auto; /* Push to bottom */
    margin-left: -1.5rem; /* Negative margin to offset container padding */
    margin-right: -1.5rem;
    margin-bottom: -1.5rem; /* Ensure it extends beyond the container */
    transition: background-color 0.2s ease-in-out;
    /* Trapezoid styling - wider at bottom */
    clip-path: polygon(20% 0%, 80% 0%, 100% 100%, 0% 100%);
    position: relative; /* Keep relative positioning */
    bottom: 0; /* Ensure it's at the bottom */
    text-shadow: 0 1px 2px rgba(255, 255, 255, 0.2); /* Subtle text shadow */
    box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2); /* Top inner glow */
    border-bottom: none;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
  }

  /* Dark mode specific styles */
  body[data-theme="dark"] .hero-game-cta-banner {
    box-shadow:
      0 -1px 0 rgba(0, 0, 0, 0.3),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
  }

  /* Blur effect commented out
  .gradient-blur { display: none; }
  .gradient-blur::before { implemented blur background opacity: 0; placeholder }
  .gradient-blur > div { blur slices }
  .gradient-blur::after { finish blur }
  */
</style>
