---
import Card from "./Card.astro";
import CardGame from "./CardGame.astro";
import "../assets/global.css";

// Eagerly import all markdown posts as components
const modules = import.meta.glob("../content/posts/*.md", { eager: true });
const allPosts = Object.entries(modules).map(([path, mod]) => {
  const frontmatter = mod.frontmatter;
  // Manually convert date strings to Date objects
  const dateCreated = frontmatter.dateCreated
    ? new Date(frontmatter.dateCreated)
    : undefined;
  const dateUpdated = frontmatter.dateUpdated
    ? new Date(frontmatter.dateUpdated)
    : undefined;

  return {
    slug: path.split("/").pop()!.replace(/\.md$/, ""),
    Component: mod.default, // The actual Astro component
    data: {
      ...frontmatter, // Keep other frontmatter data
      dateCreated, // Overwrite with Date object
      dateUpdated, // Overwrite with Date object
    },
  };
});

const { activeFilters = new Set() } = Astro.props;

// Filter posts based on active filters (passed from the page)
const filteredPosts =
  activeFilters.size > 0
    ? allPosts.filter((post) => activeFilters.has(post.data?.type))
    : allPosts;
---

<div id="content-container">
  <div class="card-grid" id="card-grid">
    {
      filteredPosts.map((post) =>
        post.data?.type === "game" ? (
          <CardGame
            title={post.data?.title || post.slug}
            slug={post.slug}
            description={post.data?.description}
            dateCreated={post.data?.dateCreated}
            dateUpdated={post.data?.dateUpdated}
          />
        ) : (
          <Card
            title={post.data?.title || post.slug}
            slug={post.slug}
            description={post.data?.description}
            dateCreated={post.data?.dateCreated}
            dateUpdated={post.data?.dateUpdated}
          />
        )
      )
    }
  </div>

  <!-- Hero card container -->
  <div class="hero-card" id="hero-card" style="display: none;">
    <div class="hero-card-header">
      <a
        href="#"
        class="hero-back-link card-link"
        id="hero-back-link"
        aria-label="Back to all posts"
      >
        &larr; Back
      </a>
      <div class="hero-title-container">
        <h1 class="hero-title" id="hero-title"></h1>
      </div>
      <div class="hero-dates">
        <p
          class="hero-date-created"
          id="hero-date-created"
          style="display: none;"
        >
        </p>
        <p
          class="hero-date-updated"
          id="hero-date-updated"
          style="display: none;"
        >
        </p>
      </div>
    </div>
    <div class="hero-card-content">
      <div class="hero-markdown" id="hero-markdown">
        <p>Loading contentâ€¦</p>
      </div>
    </div>
  </div>

  <!-- Hidden templates containing pre-rendered post content -->
  {
    allPosts.map((post) => (
      <template
        id={`content-${post.slug}`}
        data-title={post.data.title}
        data-date-created={post.data.dateCreated?.toISOString()}
        data-date-updated={post.data.dateUpdated?.toISOString()}
      >
        <article class="post-content">
          <post.Component />
        </article>
      </template>
    ))
  }
</div>

<script>
  // @ts-nocheck
  function showHeroCard(slug) {
    // Hide grid, show hero card
    document.getElementById("card-grid").style.display = "none";
    const heroCard = document.getElementById("hero-card");
    heroCard.style.display = "block";
    const container = document.getElementById("hero-markdown");

    // Find the pre-rendered content template
    const template = document.getElementById(`content-${slug}`);
    if (template) {
      // Inject the pre-rendered HTML
      container.innerHTML = template.innerHTML;

      // Update title and dates from template data attributes
      const title = template.dataset.title || slug;
      const dateCreatedStr = template.dataset.dateCreated;
      const dateUpdatedStr = template.dataset.dateUpdated;

      document.getElementById("hero-title").textContent = title;

      const dateCreatedEl = document.getElementById("hero-date-created");
      const dateUpdatedEl = document.getElementById("hero-date-updated");
      dateCreatedEl.style.display = "none"; // Reset display
      dateUpdatedEl.style.display = "none"; // Reset display

      const formatDate = (dateStr) => new Date(dateStr).toLocaleDateString();

      if (dateUpdatedStr) {
        dateUpdatedEl.textContent = `Updated: ${formatDate(dateUpdatedStr)}`;
        dateUpdatedEl.style.display = "block";
        if (dateCreatedStr) {
          const createdDate = new Date(dateCreatedStr);
          const updatedDate = new Date(dateUpdatedStr);
          const diffDays = Math.floor(
            (updatedDate - createdDate) / (1000 * 60 * 60 * 24)
          );
          if (diffDays >= 7) {
            dateCreatedEl.textContent = `Created: ${formatDate(dateCreatedStr)}`;
            dateCreatedEl.style.display = "block";
          }
        }
      } else if (dateCreatedStr) {
        dateCreatedEl.textContent = `Created: ${formatDate(dateCreatedStr)}`;
        dateCreatedEl.style.display = "block";
      }
    } else {
      console.error(`Content template not found for slug: ${slug}`);
      container.innerHTML = `<p>Error: Content not found for ${slug}.</p>`;
    }
  }

  function showCardGrid() {
    // Hide hero card, show card grid
    document.getElementById("hero-card")!.style.display = "none";
    document.getElementById("card-grid")!.style.display = "grid";

    // Update URL
    const url = new URL(window.location.href);
    url.searchParams.delete("view");
    window.history.pushState({}, "", url);
  }

  // Initialize on page load
  document.addEventListener("DOMContentLoaded", () => {
    // Check URL for view parameter
    const urlParams = new URLSearchParams(window.location.search);
    const viewSlug = urlParams.get("view");

    if (viewSlug) {
      showHeroCard(viewSlug);
    }

    // Add click handler to all card links
    document.querySelectorAll(".card-open-hero").forEach((link) => {
      link.addEventListener("click", (e) => {
        e.preventDefault();
        const slug = link.getAttribute("data-post-slug");
        if (!slug) return;

        // Update URL with view parameter
        const url = new URL(window.location.href);
        url.searchParams.set("view", slug);
        window.history.pushState({}, "", url);

        // Show hero card
        showHeroCard(slug);
      });
    });

    // Handle back link click
    const backLink = document.getElementById("hero-back-link");
    if (backLink) {
      backLink.addEventListener("click", (e) => {
        e.preventDefault();
        showCardGrid();
      });
    }

    // Handle browser back/forward buttons
    window.addEventListener("popstate", () => {
      const urlParams = new URLSearchParams(window.location.search);
      const viewSlug = urlParams.get("view");

      if (viewSlug) {
        showHeroCard(viewSlug!);
      } else {
        showCardGrid();
      }
    });
  });
</script>

<style>
  /* Card Grid Styles */
  .card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 280px));
    gap: var(--fluid-1);
    justify-content: center;
    align-items: start;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
  }

  /* Hero Card Styles */
  .hero-card {
    width: 90%; /* Use percentage instead of 100% */
    max-width: 900px;
    margin: 0 auto;
    background-color: var(--secondary-bg);
    border: 1px solid rgba(0, 0, 0, 0.8);
    box-shadow: 4px 4px 0 rgba(0, 0, 0, 0.2);
    border-radius: 0;
  }

  /* Additional left/right spacing on smaller screens */
  @media (max-width: 1024px) {
    .hero-card {
      width: 85%;
      margin: 0 auto;
    }
  }

  @media (max-width: 768px) {
    .hero-card {
      width: 80%;
      margin: 0 auto;
    }
  }

  @media (max-width: 480px) {
    .hero-card {
      width: 90%;
      margin: 0 auto;
    }
  }

  .hero-card-header {
    padding: var(--layout-padding);
    border-bottom: 1px solid var(--card-border);
    position: relative;
  }

  .hero-title {
    margin: 0.5rem 0;
    font-size: var(--fluid-2);
  }

  .hero-date {
    color: var(--desc-color);
    margin: 0.5rem 0 0;
  }

  .hero-dates {
    margin: 0.5rem 0;
  }

  .hero-date-created,
  .hero-date-updated {
    color: var(--desc-color);
    opacity: 0.7;
    margin: 0.25rem 0;
    font-size: 0.8em;
    font-style: italic;
  }

  .card .date-created,
  .card .date-updated {
    color: var(--desc-color);
    opacity: 0.7;
    font-size: 0.75em;
    margin: 0.25rem 0;
    font-style: italic;
  }

  .hero-card-content {
    padding: var(--layout-padding);
    overflow-y: auto; /* Let page scroll instead of nested scroll */
  }

  /* Back link styling with highlight hover like other links */
  .hero-back-link {
    position: relative;
    display: inline-block;
    color: inherit;
    text-decoration: none;
    font-weight: 600;
    padding-bottom: 2px;
  }

  /* Title container and divider styling */
  .hero-title-container {
    margin-top: 1rem;
  }

  .hero-divider {
    border: 0;
    height: 1px;
    background-color: var(--card-border);
    margin-bottom: 1rem;
  }

  .hero-back-link::after {
    content: "";
    position: absolute;
    width: calc(100% + 0.4em);
    height: calc(1em + 8px);
    bottom: 0;
    left: -0.2em;
    background-color: var(--primary-color);
    transform: skewX(-15deg);
    opacity: 0;
    transition: opacity 0.2s ease-in-out;
    z-index: -1;
    display: block;
  }
  .hero-back-link:hover::after,
  .hero-back-link:focus::after {
    opacity: 1;
  }
  .hero-back-link:hover,
  .hero-back-link:focus {
    color: #000;
    text-decoration: none;
  }
</style>
